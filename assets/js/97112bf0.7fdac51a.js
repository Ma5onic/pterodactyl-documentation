"use strict";(self.webpackChunkpterodactyl=self.webpackChunkpterodactyl||[]).push([[540],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),h=r,u=m["".concat(s,".").concat(h)]||m[h]||d[h]||i;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7561:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},o="Creating a Custom Docker Image",l={unversionedId:"community/creating_eggs/creating_a_custom_image",id:"community/creating_eggs/creating_a_custom_image",title:"Creating a Custom Docker Image",description:"[[toc]]",source:"@site/docs/community/creating_eggs/creating_a_custom_image.md",sourceDirName:"community/creating_eggs",slug:"/community/creating_eggs/creating_a_custom_image",permalink:"/pterodactyl-documentation/docs/community/creating_eggs/creating_a_custom_image",draft:!1,editUrl:"https://github.com/QuintenQVD0/pterodactyl-documentation/blob/main/docs/community/creating_eggs/creating_a_custom_image.md",tags:[],version:"current",frontMatter:{},sidebar:"CommunitySidebar",previous:{title:"Creating a Custom Egg",permalink:"/pterodactyl-documentation/docs/community/creating_eggs/creating_a_custom_egg"},next:{title:"Minecraft",permalink:"/pterodactyl-documentation/docs/community/game_configuration/minecraft"}},s={},c=[{value:"Creating the Dockerfile",id:"creating-the-dockerfile",level:2},{value:"Installing Dependencies",id:"installing-dependencies",level:2},{value:"Files In The Docker Image",id:"files-in-the-docker-image",level:2},{value:"Creating a Container User",id:"creating-a-container-user",level:2},{value:"Work Directory &amp; Entrypoint",id:"work-directory--entrypoint",level:2},{value:"Entrypoint Script",id:"entrypoint-script",level:2},{value:"Modifying the Startup Command",id:"modifying-the-startup-command",level:2},{value:"Run the Command",id:"run-the-command",level:2},{value:"Note",id:"note",level:3}],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-a-custom-docker-image"},"Creating a Custom Docker Image"),(0,r.kt)("p",null,"[","[toc]","]"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"This tutorial uses examples from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pterodactyl/yolks/tree/master/java/17"},(0,r.kt)("inlineCode",{parentName:"a"},"yolks:java_17"))," docker image,\nwhich can be found on GitHub. This tutorial also assumes some knowledge of ",(0,r.kt)("a",{parentName:"p",href:"https://docker.io/"},"Docker"),", we suggest\nreading up if this all looks foreign to you.")),(0,r.kt)("h2",{id:"creating-the-dockerfile"},"Creating the Dockerfile"),(0,r.kt)("p",null,"The most important part of this process is to create the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/"},(0,r.kt)("inlineCode",{parentName:"a"},"Dockerfile")),"\nthat will be used by the Daemon. Due to heavy restrictions on server containers, you must setup this file in a specific manner."),(0,r.kt)("p",null,"In most images we try to use a ",(0,r.kt)("a",{parentName:"p",href:"https://www.debian.org"},"Debian based OS")," as much as possible for our images."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'FROM        --platform=$TARGETOS/$TARGETARCH eclipse-temurin:17-jdk-jammy\n\nLABEL       author="Matthew Penner" maintainer="matthew@pterodactyl.io"\n\nLABEL       org.opencontainers.image.source="https://github.com/pterodactyl/yolks"\nLABEL       org.opencontainers.image.licenses=MIT\n\nRUN         apt-get update -y \\\n            && apt-get install -y lsof curl ca-certificates openssl git tar sqlite3 fontconfig libfreetype6 tzdata iproute2 libstdc++6 \\\n            && useradd -d /home/container -m container\n\nUSER        container\nENV         USER=container HOME=/home/container\nWORKDIR     /home/container\n\nCOPY        ./../entrypoint.sh /entrypoint.sh\nCMD         [ "/bin/bash", "/entrypoint.sh" ]\n')),(0,r.kt)("p",null,"Lets walk through the ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," above. The first thing you'll notice is the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#from"},(0,r.kt)("inlineCode",{parentName:"a"},"FROM"))," declaration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"FROM --platform=$TARGETOS/$TARGETARCH eclipse-temurin:17-jdk-jammy\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--platform=$TARGETOS/$TARGETARCH")," allows us to specify in the github workflow that we want to build for linux/amd64 and linux/arm64. See ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#from"},"Docker docs")),(0,r.kt)("p",null,"In this case, we are using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/adoptium/containers/tree/main"},(0,r.kt)("inlineCode",{parentName:"a"},"eclipse-temurin:17-jdk-jammy"))," which provides us with Java 17."),(0,r.kt)("h2",{id:"installing-dependencies"},"Installing Dependencies"),(0,r.kt)("p",null,"The next thing we do is install the dependencies we will need using Debian/Ubuntu's package manager: ",(0,r.kt)("inlineCode",{parentName:"p"},"apt"),". You'll notice some\nspecific flags ",(0,r.kt)("inlineCode",{parentName:"p"},"-y")," as the docker build is non interactive, as well as everything being contained in a\nsingle ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#run"},(0,r.kt)("inlineCode",{parentName:"a"},"RUN"))," block."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"The dependencie ",(0,r.kt)("inlineCode",{parentName:"p"},"iproute2")," is required in every docker container to make the ip command work")),(0,r.kt)("h2",{id:"files-in-the-docker-image"},"Files In The Docker Image"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Because the way that Pterodactyl works no files can be placed in the docker container in ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/container"),".")),(0,r.kt)("p",null,"All files must be downloaded with the egg install script, this means for example that you can not put your bot files or minecraft server jar can not be put in the image as you can with regular docker images"),(0,r.kt)("h2",{id:"creating-a-container-user"},"Creating a Container User"),(0,r.kt)("p",null,"Within this ",(0,r.kt)("inlineCode",{parentName:"p"},"RUN")," block, you'll notice the ",(0,r.kt)("inlineCode",{parentName:"p"},"useradd")," command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," useradd -d /home/container -m container\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"All Pterodactyl containers must have a user named ",(0,r.kt)("inlineCode",{parentName:"p"},"container"),", and the user home ",(0,r.kt)("strong",{parentName:"p"},"must")," be ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/container"),".")),(0,r.kt)("p",null,"After we create that user, we then define the default container ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#user"},(0,r.kt)("inlineCode",{parentName:"a"},"USER")),"\nas well as a few ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#env"},(0,r.kt)("inlineCode",{parentName:"a"},"ENV"))," settings to be applied to things running\nwithin the container."),(0,r.kt)("h2",{id:"work-directory--entrypoint"},"Work Directory & Entrypoint"),(0,r.kt)("p",null,"One of the last things we do is define a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#workdir"},(0,r.kt)("inlineCode",{parentName:"a"},"WORKDIR"))," which\nis where everything else will be executed. The ",(0,r.kt)("inlineCode",{parentName:"p"},"WORKDIR")," must be set the ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/container"),"."),(0,r.kt)("p",null,"Finally, we need to copy our ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#entrypoint"},(0,r.kt)("inlineCode",{parentName:"a"},"ENTRYPOINT"))," script into\nthe docker image root. This is done using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#copy"},(0,r.kt)("inlineCode",{parentName:"a"},"COPY")),", after which\nwe define the command to be used when the container is started using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#cmd"},(0,r.kt)("inlineCode",{parentName:"a"},"CMD")),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"CMD")," line should always point to the ",(0,r.kt)("inlineCode",{parentName:"p"},"entrypoint.sh")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'COPY        ./../entrypoint.sh /entrypoint.sh\nCMD         [ "/bin/bash", "/entrypoint.sh" ]\n')),(0,r.kt)("h2",{id:"entrypoint-script"},"Entrypoint Script"),(0,r.kt)("p",null,"In order to complete this ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile"),", we will need an ",(0,r.kt)("inlineCode",{parentName:"p"},"entrypoint.sh")," file which tells Docker how to run this\nspecific server type."),(0,r.kt)("p",null,"These entrypoint files are actually fairly abstracted, and the Daemon will pass in the start command as an environment\nvariable before processing it and then executing the command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Default the TZ environment variable to UTC.\nTZ=${TZ:-UTC}\nexport TZ\n\n# Set environment variable that holds the Internal Docker IP\nINTERNAL_IP=$(ip route get 1 | awk \'{print $(NF-2);exit}\')\nexport INTERNAL_IP\n\n# Switch to the container\'s working directory\ncd /home/container || exit 1\n\n# Print Java version\nprintf "\\033[1m\\033[33mcontainer@pterodactyl~ \\033[0mjava -version\\n"\njava -version\n\n# Convert all of the "{{VARIABLE}}" parts of the command into the expected shell\n# variable format of "${VARIABLE}" before evaluating the string and automatically\n# replacing the values.\nPARSED=$(echo "${STARTUP}" | sed -e \'s/{{/${/g\' -e \'s/}}/}/g\' | eval echo "$(cat -)")\n\n# Display the command we\'re running in the output, and then execute it with the env\n# from the container itself.\nprintf "\\033[1m\\033[33mcontainer@pterodactyl~ \\033[0m%s\\n" "$PARSED"\n# shellcheck disable=SC2086\nexec env ${PARSED}\n')),(0,r.kt)("p",null,"First we set the timezone."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"TZ=${TZ:-UTC}\nexport TZ\n")),(0,r.kt)("p",null,"Then we make the internal ip avaible in the docker container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"INTERNAL_IP=$(ip route get 1 | awk '{print $(NF-2);exit}')\nexport INTERNAL_IP\n")),(0,r.kt)("p",null,"The third command, ",(0,r.kt)("inlineCode",{parentName:"p"},"cd /home/container"),", simply ensures we are in the correct directory when running the rest of the\ncommands. We then follow that up with ",(0,r.kt)("inlineCode",{parentName:"p"},"java -version")," to output this information to end-users, but that is not necessary."),(0,r.kt)("h2",{id:"modifying-the-startup-command"},"Modifying the Startup Command"),(0,r.kt)("p",null,"The most significant part of this file is the ",(0,r.kt)("inlineCode",{parentName:"p"},"MODIFIED_STARTUP")," environment variable. What we are doing in this case\nis parsing the environment ",(0,r.kt)("inlineCode",{parentName:"p"},"STARTUP")," that is passed into the container by the Daemon. In most cases, this variable\nlooks something like the example below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'STARTUP="java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}"\n')),(0,r.kt)("admonition",{title:"v-pre",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You'll notice some placeholders there, specifically ",(0,r.kt)("inlineCode",{parentName:"p"},"{{SERVER_JARFILE}}"),". These refer to\nother environment variables being passed in, and they look something like the example below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"SERVER_JARFILE=server.jar\n")),(0,r.kt)("p",null,"There are a host of different environment variables, and they change depending on the specific service option\nconfiguration. However, that is not necessarily anything to worry about here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"PARSED=$(echo \"${STARTUP}\" | sed -e 's/{{/${/g' -e 's/}}/}/g' | eval echo \"$(cat -)\")\n")),(0,r.kt)("admonition",{title:"v-pre",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The command above simply evaluates the ",(0,r.kt)("inlineCode",{parentName:"p"},"STARTUP")," environment variable, and then replaces anything surrounded in\ncurly braces ",(0,r.kt)("inlineCode",{parentName:"p"},"{{EXAMPLE}}")," with a matching environment variable (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"EXAMPLE"),"). Thus, our ",(0,r.kt)("inlineCode",{parentName:"p"},"STARTUP")," command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}\n")),(0,r.kt)("p",null,"Becomes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar\n")),(0,r.kt)("h2",{id:"run-the-command"},"Run the Command"),(0,r.kt)("p",null,"The last step is to run this modified startup command, which is done with the line ",(0,r.kt)("inlineCode",{parentName:"p"},"exec env ${PARSED}"),"."),(0,r.kt)("h3",{id:"note"},"Note"),(0,r.kt)("p",null,"Sometimes you may need to change the permissions of the ",(0,r.kt)("inlineCode",{parentName:"p"},"entrypoint.sh")," file, on linux you can do this by executing ",(0,r.kt)("inlineCode",{parentName:"p"},"chmod +x entrypoint.sh")," in the directory where the file is."))}d.isMDXComponent=!0}}]);