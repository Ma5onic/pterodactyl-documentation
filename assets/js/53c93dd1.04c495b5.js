"use strict";(self.webpackChunkpterodactyl=self.webpackChunkpterodactyl||[]).push([[338],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),h=r,u=m["".concat(l,".").concat(h)]||m[h]||d[h]||i;return t?a.createElement(u,o(o({ref:n},c),{},{components:t})):a.createElement(u,o({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},1160:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={},o="Creating a Custom Docker Image",s={unversionedId:"Community/Creating Eggs/creating_a_custom_image",id:"Community/Creating Eggs/creating_a_custom_image",title:"Creating a Custom Docker Image",description:"This tutorial uses examples from our core:java docker image,",source:"@site/docs/Community/Creating Eggs/creating_a_custom_image.md",sourceDirName:"Community/Creating Eggs",slug:"/Community/Creating Eggs/creating_a_custom_image",permalink:"/docs/Community/Creating Eggs/creating_a_custom_image",draft:!1,editUrl:"https://github.com/pterodactyl/documentation/docs/Community/Creating Eggs/creating_a_custom_image.md",tags:[],version:"current",frontMatter:{},sidebar:"CommunitySidebar",previous:{title:"Creating a Custom Egg",permalink:"/docs/Community/Creating Eggs/creating_a_custom_egg"},next:{title:"Minecraft",permalink:"/docs/Community/Game Configuration/minecraft"}},l={},p=[{value:"Creating the Dockerfile",id:"creating-the-dockerfile",level:2},{value:"Installing Dependencies",id:"installing-dependencies",level:2},{value:"Creating a Container User",id:"creating-a-container-user",level:2},{value:"Work Directory &amp; Entrypoint",id:"work-directory--entrypoint",level:2},{value:"Entrypoint Script",id:"entrypoint-script",level:2},{value:"Modifying the Startup Command",id:"modifying-the-startup-command",level:2},{value:"Run the Command",id:"run-the-command",level:2},{value:"Note",id:"note",level:3}],c={toc:p},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-a-custom-docker-image"},"Creating a Custom Docker Image"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"This tutorial uses examples from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pterodactyl/images/tree/java"},(0,r.kt)("inlineCode",{parentName:"a"},"core:java"))," docker image,\nwhich can be found on GitHub. This tutorial also assumes some knowledge of ",(0,r.kt)("a",{parentName:"p",href:"https://docker.io/"},"Docker"),", we suggest\nreading up if this all looks foreign to you.")),(0,r.kt)("h2",{id:"creating-the-dockerfile"},"Creating the Dockerfile"),(0,r.kt)("p",null,"The most important part of this process is to create the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/"},(0,r.kt)("inlineCode",{parentName:"a"},"Dockerfile")),"\nthat will be used by the Daemon. Due to heavy restrictions on server containers, you must setup this file in a specific manner."),(0,r.kt)("p",null,"We try to make use of ",(0,r.kt)("a",{parentName:"p",href:"https://alpinelinux.org"},"Alpine Linux")," as much as possible for our images in order to keep their size down."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# ----------------------------------\n# Pterodactyl Core Dockerfile\n# Environment: Java\n# Minimum Panel Version: 0.6.0\n# ----------------------------------\nFROM openjdk:8-jdk-alpine\n\nMAINTAINER Pterodactyl Software, <support@pterodactyl.io>\n\nRUN apk add --no-cache --update curl ca-certificates openssl git tar bash sqlite fontconfig \\\n    && adduser --disabled-password --home /home/container container\n\nUSER container\nENV  USER=container HOME=/home/container\n\nWORKDIR /home/container\n\nCOPY ./entrypoint.sh /entrypoint.sh\n\nCMD ["/bin/bash", "/entrypoint.sh"]\n')),(0,r.kt)("p",null,"Lets walk through the ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," above. The first thing you'll notice is the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#from"},(0,r.kt)("inlineCode",{parentName:"a"},"FROM"))," declaration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"FROM openjdk:8-jdk-alpine\n")),(0,r.kt)("p",null,"In this case, we are using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/docker-library/openjdk"},(0,r.kt)("inlineCode",{parentName:"a"},"openjdk:8-jdk-alpine"))," which provides us with Java 8."),(0,r.kt)("h2",{id:"installing-dependencies"},"Installing Dependencies"),(0,r.kt)("p",null,"The next thing we do is install the dependencies we will need using Alpine's package manager: ",(0,r.kt)("inlineCode",{parentName:"p"},"apk"),". You'll notice some\nspecific flags that keep the container small, including ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-cache"),", as well as everything being contained in a\nsingle ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#run"},(0,r.kt)("inlineCode",{parentName:"a"},"RUN"))," block."),(0,r.kt)("h2",{id:"creating-a-container-user"},"Creating a Container User"),(0,r.kt)("p",null,"Within this ",(0,r.kt)("inlineCode",{parentName:"p"},"RUN")," block, you'll notice the ",(0,r.kt)("inlineCode",{parentName:"p"},"useradd")," command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"adduser -D -h /home/container container\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"All Pterodactyl containers must have a user named ",(0,r.kt)("inlineCode",{parentName:"p"},"container"),", and the user home ",(0,r.kt)("strong",{parentName:"p"},"must")," be ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/container"),".")),(0,r.kt)("p",null,"After we create that user, we then define the default container ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#user"},(0,r.kt)("inlineCode",{parentName:"a"},"USER")),"\nas well as a few ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#env"},(0,r.kt)("inlineCode",{parentName:"a"},"ENV"))," settings to be applied to things running\nwithin the container."),(0,r.kt)("h2",{id:"work-directory--entrypoint"},"Work Directory & Entrypoint"),(0,r.kt)("p",null,"One of the last things we do is define a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#workdir"},(0,r.kt)("inlineCode",{parentName:"a"},"WORKDIR"))," which\nis where everything else will be executed. The ",(0,r.kt)("inlineCode",{parentName:"p"},"WORKDIR")," must be set the ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/container"),"."),(0,r.kt)("p",null,"Finally, we need to copy our ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#entrypoint"},(0,r.kt)("inlineCode",{parentName:"a"},"ENTRYPOINT"))," script into\nthe docker image root. This is done using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#copy"},(0,r.kt)("inlineCode",{parentName:"a"},"COPY")),", after which\nwe define the command to be used when the container is started using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#cmd"},(0,r.kt)("inlineCode",{parentName:"a"},"CMD")),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"CMD")," line should always point to the ",(0,r.kt)("inlineCode",{parentName:"p"},"entrypoint.sh")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'COPY ./entrypoint.sh /entrypoint.sh\nCMD ["/bin/bash", "/entrypoint.sh"]\n')),(0,r.kt)("h2",{id:"entrypoint-script"},"Entrypoint Script"),(0,r.kt)("p",null,"In order to complete this ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile"),", we will need an ",(0,r.kt)("inlineCode",{parentName:"p"},"entrypoint.sh")," file which tells Docker how to run this\nspecific server type."),(0,r.kt)("p",null,"These entrypoint files are actually fairly abstracted, and the Daemon will pass in the start command as an environment\nvariable before processing it and then executing the command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\ncd /home/container\n\n# Output Current Java Version\njava -version ## only really needed to show what version is being used. Should be changed for different applications\n\n# Replace Startup Variables\nMODIFIED_STARTUP=`eval echo $(echo ${STARTUP} | sed -e 's/{{/${/g' -e 's/}}/}/g')`\necho \":/home/container$ ${MODIFIED_STARTUP}\"\n\n# Run the Server\n${MODIFIED_STARTUP}\n")),(0,r.kt)("p",null,"The second command, ",(0,r.kt)("inlineCode",{parentName:"p"},"cd /home/container"),", simply ensures we are in the correct directory when running the rest of the\ncommands. We then follow that up with ",(0,r.kt)("inlineCode",{parentName:"p"},"java -version")," to output this information to end-users, but that is not necessary."),(0,r.kt)("h2",{id:"modifying-the-startup-command"},"Modifying the Startup Command"),(0,r.kt)("p",null,"The most significant part of this file is the ",(0,r.kt)("inlineCode",{parentName:"p"},"MODIFIED_STARTUP")," environment variable. What we are doing in this case\nis parsing the environment ",(0,r.kt)("inlineCode",{parentName:"p"},"STARTUP")," that is passed into the container by the Daemon. In most cases, this variable\nlooks something like the example below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'STARTUP="java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}"\n')),(0,r.kt)("admonition",{title:"v-pre",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You'll notice some placeholders there, specifically ",(0,r.kt)("inlineCode",{parentName:"p"},"{{SERVER_MEMORY}}")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"{{SERVER_JARFILE}}"),". These both refer to\nother environment variables being passed in, and they look something like the example below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"SERVER_MEMORY=1024\nSERVER_JARFILE=server.jar\n")),(0,r.kt)("p",null,"There are a host of different environment variables, and they change depending on the specific service option\nconfiguration. However, that is not necessarily anything to worry about here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MODIFIED_STARTUP=`eval echo $(echo ${STARTUP} | sed -e 's/{{/${/g' -e 's/}}/}/g')`\n")),(0,r.kt)("admonition",{title:"v-pre",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The command above simply evaluates the ",(0,r.kt)("inlineCode",{parentName:"p"},"STARTUP")," environment variable, and then replaces anything surrounded in\ncurly braces ",(0,r.kt)("inlineCode",{parentName:"p"},"{{EXAMPLE}}")," with a matching environment variable (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"EXAMPLE"),"). Thus, our ",(0,r.kt)("inlineCode",{parentName:"p"},"STARTUP")," command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}\n")),(0,r.kt)("p",null,"Becomes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"java -Xms128M -Xmx1024M -jar server.jar\n")),(0,r.kt)("h2",{id:"run-the-command"},"Run the Command"),(0,r.kt)("p",null,"The last step is to run this modified startup command, which is done with the line ",(0,r.kt)("inlineCode",{parentName:"p"},"${MODIFIED_STARTUP}"),"."),(0,r.kt)("h3",{id:"note"},"Note"),(0,r.kt)("p",null,"Sometimes you may need to change the permissions of the ",(0,r.kt)("inlineCode",{parentName:"p"},"entrypoint.sh")," file, on linux you can do this by executing ",(0,r.kt)("inlineCode",{parentName:"p"},"chmod +x entrypoint.sh")," in the directory where the file is."))}d.isMDXComponent=!0}}]);